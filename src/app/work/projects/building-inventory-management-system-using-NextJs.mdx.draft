---
title: "Building an advanced inventory management system."

publishedAt: "2024-10-02"
summary: "Using Next.js, Clerk auth, and Prisma, I built a scalable dashboard for inventory management."
images:
  - "/images/projects/project-01/inventrack-poster.png"
team:
  - name: "Joshua Farhi"
    role: "Software Engineer & UX/UI Design"
    avatar: "/images/avatar.jpeg"
    linkedIn: "https://www.linkedin.com/joshua-farhi/"

  - name: "Sabrina Kwak"
    role: "Software Engineer"
    avatar: "/images/projects/project-01/avatar-01.png"
    linkedIn: "https://www.linkedin.com/in/sabrina-kwak"
---

## Technologies Used

- **Shadcn UI Framework**: Shadcn was used to build the front-end codebase, providing a collection of reusable, highly customizable components that offer a seamless and responsive user experience. Its utility-first design philosophy, combined with integration into modern frameworks, helped streamline UI development while ensuring optimal performance and flexibility.
- **QR Code Scanner**: The QR code scanner feature enables fast and accurate scanning of product labels, allowing users to effortlessly retrieve inventory details. Built with a focus on efficiency and ease of use, the scanner integrates seamlessly into the application, ensuring smooth transitions between scanning and inventory management tasks. Leveraging advanced scanning technology, this feature enhances productivity by reducing manual data entry and minimizing errors, creating a streamlined, responsive experience for users in real-time inventory tracking.
- **Dynamic Styling Library**: This tool was used for managing styles dynamically, ensuring a consistent and visually appealing UI throughout the application. It allowed the team to build custom, responsive designs quickly while maintaining design consistency.
- **Authentication Service**: A secure authentication service was integrated to handle user login and access management, ensuring that user data remains protected while providing a seamless yet highly secure onboarding experience for users.
- **ORM for Database Interactions**: An Object-Relational Mapping tool was employed to manage database interactions, specifically handling complex data relationships between various entities such as products and transactions. This schema-driven approach simplified database operations while ensuring data integrity.
- **SQL Database on Cloud Hosting**: The system uses a scalable SQL database hosted on a cloud platform to ensure reliable backend data storage. This setup provides high availability and helps maintain data integrity while scaling with the application's growing needs.
- **CI/CD Pipeline**: Continuous integration and delivery were managed using automation tools that streamline development workflows, including testing, building, and deploying updates to the application. This has helped maintain high code quality.

## Challenges and Learnings

The main challenges were managing **complex relational data**, securing **user authentication**, and maintaining **high performance** for **real-time data updates**. The ORM's **schema capabilities** allowed effective modeling of relationships between various entities. The authentication service provided **secure user flows**, while optimizations in the front-end framework ensured **efficient data fetching** and system **responsiveness** under **heavy load**.

## Outcome

The system successfully enables users to **track inventory, manage orders, and handle returns** efficiently. The **intuitive UI**, along with **automated features** for **quick product scanning** and **tracking**, has improved operational transparency, efficiency, and ease of use. The **advanced reporting features** offer insights that help businesses make **informed decisions** regarding inventory levels and overall **operational efficiency**. As a result, the system has demonstrated its ability to **reduce errors, streamline inventory management processes, and save valuable time and resources**, proving its value as a crucial tool for businesses across industries.
